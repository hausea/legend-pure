// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Press F9 to execute the 'go' function...
// Press F10 to run the full test suite

import meta::legend::crud::functions::*;
import meta::legend::crud::metamodel::*;
import meta::pure::functions::collection::*;
import meta::pure::functions::meta::*;
import meta::pure::runtime::*;
import meta::pure::graphFetch::*;
import meta::relational::metamodel::execute::*;

import meta::legend::crud::tests::*;

function <<test.Test>> meta::legend::crud::tests::testResolvedApplicationFromPath():Any[*]
{
  let resolvedInteractiveApplication = resolveInteractiveApplication('meta::legend::crud::tests')->toOne();
}

function meta::legend::crud::tests::buildApp(): InteractiveApplication[1]
{
    ^InteractiveApplication(
    package = 'meta::legend::crud::tests',
    name = 'demoApp',
    store = meta::legend::crud::functions::defaultStore(),
    
    globalAuthorization = [],
    types = [
      ^InteractiveType(
        baseClass = Firm,
        graphScope = ^RootGraphFetchTree<Firm>(
          class = Firm
        ),
        configuration = [
          ^InteractiveTypePrimaryKeysConfiguration<Firm>(
            primaryKeys = [
              ^InteractiveTypePrimaryKeysPrimaryKeyConfiguration<Firm, Integer>(
                property = Firm->propertyByName('id')->toOne(),
                strategy = PrimaryKeyStrategy.NONE
              )
            ]
          )
          // ,
          // ^InteractiveTypeStringPropertyConfiguration<Firm>(
          //   property = Firm->propertyByName('name')->toOne()->cast(@Property<Firm, String|0..1>),
          //   maxLength = 64
          // )
        ],
        services = [
          ^InteractiveService(
            name = 'allFirms',
            authorization = [],
            query = |Firm.all()
          ),
          ^InteractiveService(
            name = 'firmById',
            authorization = [],
            query = id: Integer[1]|Firm.all()->filter(f | $f.id == $id)
          )      
        ]
      )
    ]
  );
}

Class meta::legend::crud::tests::Firm
{
  id: Integer[1];
  name: String[0..1];
}
