import meta::pure::functions::meta::*;
import meta::pure::functions::lang::*;
import meta::pure::functions::collection::*;

import meta::relational::metamodel::*;
import meta::relational::metamodel::relation::*;

import meta::pure::mapping::*;

import meta::pure::runtime::*;

import meta::legend::crud::metamodel::*;
import meta::legend::crud::functions::*;

//TODO: AJH: Temporary - InteractiveApplication DSL :)
function meta::legend::crud::functions::resolveInteractiveApplication(interactiveApplicationFunctionPath: String[1]): ResolvedInteractiveApplication[0..1]
{
  let generatorFunctionPackage = $interactiveApplicationFunctionPath->split('::')->fold({pathPart: String[1], package: PackageableElement[1] | 
    let target = $package->cast(@Package).children->filter(c | $c.name == $pathPart);
    if ($target->isEmpty(), | Nil, | $target->toOne());
  }, ::);
  let generatorFunctions = 
    $generatorFunctionPackage->cast(@Package).children
      ->filter(c | $c->instanceOf(meta::pure::metamodel::function::Function))
      ->filter(f | $f->cast(@meta::pure::metamodel::function::Function<Any>).functionName == 'buildApp')
      ->map(f | $f->cast(@meta::pure::metamodel::function::Function<{->InteractiveApplication[1]}>));

  if ($generatorFunctions->isEmpty(),
    | [],
    | resolveInteractiveApplication($generatorFunctions->first()->toOne()->eval()));
}

function meta::legend::crud::functions::resolveInteractiveApplication(interactiveApplication: InteractiveApplication[1]): ResolvedInteractiveApplication[1]
{
  let store = interactiveApplicationToStore($interactiveApplication);
  let mapping = interactiveApplicationToMapping($interactiveApplication, $store);
  ^ResolvedInteractiveApplication(
    interactiveApplication = $interactiveApplication,
    queryClass = generateQueryClassForInteractiveApplication($interactiveApplication),
    store = $store,
    mapping = $mapping,
    runtime = generateRuntimeForInteractiveApplication($interactiveApplication, $store)
  );
}

function <<access.private>> meta::legend::crud::functions::generateQueryClassForInteractiveApplication(interactiveApplication: InteractiveApplication[1]): Class<Any>[1]
{
  let queryClass = ^Class<Any>(name = 'Query', package = pathToPackage($interactiveApplication.package));
  
  let properties = createServiceDerivedQueryProperties($queryClass, $interactiveApplication);

  $queryClass->mutateAdd('generalizations', ^Generalization(general = ^GenericType(rawType = Any), specific = $queryClass));
  $queryClass->mutateAdd('qualifiedProperties', $properties);
  
  $queryClass;

  // let queryClassInstance = $queryClass->dynamicNew([]);
    // [^KeyValue(key = 'stringProperty', value = 'word')]);

  // $queryClassInstance;
}

function <<access.private>> meta::legend::crud::functions::createServiceDerivedQueryProperties(queryClass: Class<Any>[1], interactiveApplication: InteractiveApplication[1]): QualifiedProperty<Any>[*]
{
  $interactiveApplication.types->fold({type, properties| 
    $type.services->map(service | 
      let responsePropertyType = $type.baseClass;
      let multiplicity = ZeroMany;

      let expressionSequence = $service.query.expressionSequence;
      let servicePropertyTemplate = 
        ^QualifiedProperty<Any>(
          name = $service.name,
          multiplicity = $multiplicity,
          genericType = ^GenericType(rawType = $responsePropertyType),
          owner = $queryClass,
          expressionSequence = $expressionSequence
        );

      let serviceProperty = ^$servicePropertyTemplate(
        classifierGenericType = ^GenericType(
          rawType = QualifiedProperty,
          typeArguments = [
            ^GenericType(
              rawType = ^FunctionType(
                returnMultiplicity = $multiplicity,
                returnType = ^GenericType(rawType = $responsePropertyType)
              )
            )
          ]
        )
      )->evaluateAndDeactivate();
      
      $properties->add($serviceProperty);
    )
  }, [])
}

function <<access.private>> meta::legend::crud::functions::generateRuntimeForInteractiveApplication(interactiveApplication: InteractiveApplication[1], store: meta::pure::store::Store[1]): Runtime[1]
{
  ^Runtime(
    connections = [
      $interactiveApplication.store.connection->eval($store)
    ]
  );
}

function <<access.private>> meta::legend::crud::functions::allClassesForInteractiveApplication(interactiveApplication: InteractiveApplication[1]): Class<Any>[*]
{
  $interactiveApplication.types->fold({type, classes |
    $classes->concatenate([$type.baseClass]);
    //TODO: AJH: also traverse the graph fetches and extract ALL classes
    //$type.graphScope
  }, []);
}

function <<access.private>> meta::legend::crud::functions::interactiveApplicationToStore(interactiveApplication: InteractiveApplication[1]): Database[1]
{
  classesToStore(allClassesForInteractiveApplication($interactiveApplication), $interactiveApplication)
}

function <<access.private>> meta::legend::crud::functions::classesToStore(classes: Class<Any>[0..*], interactiveApplication: InteractiveApplication[1]): Database[1]
{
  let database = ^Database(
    name = $interactiveApplication.name + 'Database',
    package = pathToPackage($interactiveApplication.package),
    filters = [],
    includes = []
  );
  let schema = ^Schema(database = $database, name = 'default');//upperSnakeCase($interactiveApplication.name));
  let tables = $classes->map(c | classToTable($c, $schema));
  let joins = []; // do we even need joins?  well yes, yes we do... generate pk's?
  ^$database(
    schemas = [
      ^$schema(
        tables = $tables,
        relations = $tables
      )
    ], 
    joins = $joins);
}

function <<access.private>> meta::legend::crud::functions::classToTable(class: Class<Any>[1], schema: Schema[1]): Table[1]
{
  let table = ^Table(
    name = upperSnakeCase($class.name->toOne()),
    schema = $schema
  );
  let columns = $class.properties->map(p | propertyToColumn($p, $table));
  let primaryKeys = $columns->filter(c | $c.name == 'ID');
  $table->mutateAdd('columns', $columns);
  $table->mutateAdd('setColumns', $columns);
  $table->mutateAdd('primaryKey', $primaryKeys);
  $table;
}

function <<access.private>> meta::legend::crud::functions::propertyToColumn(property: Property<Nil, Any|*>[1], table: Table[1]): Column[1]
{
  ^Column(
    name = upperSnakeCase($property.name->toOne()),
    type = pureDataTypeToRelationalDataType($property.genericType.rawType->cast(@DataType)->toOne()),
    owner = $table
  );
}

function <<access.private>> meta::legend::crud::functions::pureDataTypeToRelationalDataType(type: DataType[1]): meta::relational::metamodel::datatype::DataType[1]
{
  $type->match([
    i: PrimitiveType[1] | if ($i == String, | ^meta::relational::metamodel::datatype::Varchar(size = 64), |
                            if ($i == Float, | ^meta::relational::metamodel::datatype::Double(), |
                              if ($i == Boolean, | ^meta::relational::metamodel::datatype::SmallInt(), |
                                if ($i == Integer, | ^meta::relational::metamodel::datatype::BigInt(), |
                                  if ($i == Date, | ^meta::relational::metamodel::datatype::Timestamp(), |
                                    ^meta::relational::metamodel::datatype::Varchar(size = 64)))))),
    e: Enumeration<Any>[1] | ^meta::relational::metamodel::datatype::Varchar(size = 64),
    a: Any[1] | ^meta::relational::metamodel::datatype::Float()
  ]);
}

function <<access.private>> meta::legend::crud::functions::interactiveApplicationToMapping(interactiveApplication: InteractiveApplication[1], store: Database[1]): Mapping[1]
{
  classesToMapping(allClassesForInteractiveApplication($interactiveApplication), $store, $interactiveApplication)
}

function <<access.private>> meta::legend::crud::functions::classesToMapping(classes: Class<Any>[0..*], store: Database[1], interactiveApplication: InteractiveApplication[1]): Mapping[1]
{
  let mapping = ^Mapping(
    name = $interactiveApplication.name + 'Mapping',
    package = pathToPackage($interactiveApplication.package)
    
    // includes : MappingInclude[*];
    // classMappings : SetImplementation[*];
    // enumerationMappings : EnumerationMapping<Any>[*];
    // associationMappings : AssociationImplementation[*];
  );

  let enumerationMappings = [];//TODO:
  let classMappings = $classes->toIndexed()->map(p | classToClassMapping($p.first, $p.second, $store, $mapping, $interactiveApplication));
  let associationMappings = [];//TODO:

  $mapping->mutateAdd('enumerationMappings', $enumerationMappings);
  $mapping->mutateAdd('classMappings', $classMappings);
  $mapping->mutateAdd('associationMappings', $associationMappings);

  $mapping;
}

function <<access.private>> meta::legend::crud::functions::classToClassMapping(id: Integer[1], class: Class<Any>[1], store: Database[1], mapping: Mapping[1], interactiveApplication: InteractiveApplication[1]): Any[1]
{
  let schema = $store.schema('default');//upperSnakeCase($interactiveApplication.name));
  let table = $schema.table(upperSnakeCase($class.name->toOne()))->toOne();
  let tableAlias = ^TableAlias(
    name = upperSnakeCase($class.name->toOne()), 
    database = $store,
    relationalElement = $table);

  let classMapping = ^meta::relational::mapping::RootRelationalInstanceSetImplementation(
    id = $id->toString(),
    class = $class,
    root = true,
    parent = $mapping,
    mainTableAlias = $tableAlias,
    userDefinedPrimaryKey = false,
    stores = [$store],
    distinct = false
  );

  let propertyMappings = $class.properties->toIndexed()->map(pair |
    let id = $pair.first;
    let property = $pair.second;

    let column = $table.column(upperSnakeCase($property.name->toOne()))->toOne();
    let columnAlias = ^TableAliasColumn(
      alias = $tableAlias, 
      column = $column
    );

    ^meta::relational::mapping::RelationalPropertyMapping(
      owner = $classMapping,
      localMappingProperty = false,
      property = $property,
      transformer = [], //TODO: AJH: enumeration mappings + transformer
      relationalOperationElement = $columnAlias,
      sourceSetImplementationId = $id->toString(),
      targetSetImplementationId = ''
    );
  );

  $classMapping->mutateAdd('propertyMappings', $propertyMappings);
  //TODO: AJH: need to better handle pk's and fk's
  $classMapping->mutateAdd('primaryKey', $propertyMappings->map(pm | $pm.relationalOperationElement->cast(@TableAliasColumn))->filter(tac | $tac.column.name == 'ID'));

  $classMapping;
}

function <<access.private>> meta::legend::crud::functions::upperSnakeCase(string: String[1]): String[1]
{
  $string->substring(0, 1)->toUpper() + $string->substring(1)->chunk(1)->map(s | if ($s->toUpper() == $s, | '_' + $s, | $s->toUpper()))->joinStrings()
}