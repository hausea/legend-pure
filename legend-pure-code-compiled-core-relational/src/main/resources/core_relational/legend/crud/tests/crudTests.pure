// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Press F9 to execute the 'go' function...
// Press F10 to run the full test suite

import meta::legend::crud::functions::*;
import meta::legend::crud::metamodel::*;
import meta::legend::relational::crud::metamodel::*;
import meta::pure::functions::collection::*;
import meta::pure::functions::meta::*;
import meta::pure::runtime::*;
import meta::pure::graphFetch::*;
import meta::relational::metamodel::execute::*;
import meta::pure::mapping::*;

import meta::legend::relational::crud::tests::*;

function <<test.Test>> meta::legend::relational::crud::tests::testResolvedApplicationFromPath():Any[*]
{
  let resolvedInteractiveApplication = resolveInteractiveApplication('meta::legend::relational::crud::tests')->toOne();
  meta::legend::relational::crud::tests::generateDatabase($resolvedInteractiveApplication);

  let allFirms = $resolvedInteractiveApplication.queryClass.qualifiedProperties->filter(qp | $qp.name == 'allFirms');
  
  let debugContext = ^DebugContext(debug = false, space = '');
  let executionContext = ^ExecutionContext();
  let result = execute(
    $allFirms->toOne()->cast(@FunctionDefinition<{->Any[*]}>),
    $resolvedInteractiveApplication.mapping, 
    $resolvedInteractiveApplication.runtime, 
    $executionContext, meta::pure::router::extension::defaultRelationalExtensions(), 
    $debugContext);
  // print($result.values->size());
  assertEquals(1, $result.values->size());
}

function meta::legend::relational::crud::tests::generateDatabase(resolvedInteractiveApplication: ResolvedInteractiveApplication[1]):Any[*]
{
  let connection = $resolvedInteractiveApplication.runtime.connectionByElement($resolvedInteractiveApplication.store)->cast(@meta::relational::runtime::DatabaseConnection);
  executeInDb('DROP TABLE IF EXISTS FIRM;', $connection, 5000, 5000);
  executeInDb('CREATE TABLE FIRM (ID INT PRIMARY KEY, NAME VARCHAR(64));', $connection, 5000, 5000);
  executeInDb('INSERT INTO FIRM (ID, NAME) VALUES (1, \'GS\');', $connection, 5000, 5000);
}

function meta::legend::relational::crud::tests::buildApp(): InteractiveApplication[1]
{
  ^InteractiveApplication(
    package = 'meta::legend::relational::crud::tests',
    name = 'demoApp',
    store = meta::legend::relational::crud::functions::defaultRelationalStore({
      store: meta::pure::store::Store[1]|
        ^meta::relational::runtime::TestDatabaseConnection(
          element = $store,
          type = meta::relational::runtime::DatabaseType.H2
        )
      }
    ),
    
    globalAuthorization = [],
    types = [
      ^InteractiveType(
        baseClass = Firm,
        graphScope = ^RootGraphFetchTree<Firm>(
          class = Firm
        ),
        configuration = [
          ^InteractiveTypePrimaryKeysConfiguration<Firm>(
            primaryKeys = [
              ^InteractiveTypePrimaryKeysPrimaryKeyConfiguration<Firm, Integer>(
                property = Firm->propertyByName('id')->toOne(),
                strategy = PrimaryKeyStrategy.NONE
              )
            ]
          )
          // ,
          // ^InteractiveTypeStringPropertyConfiguration<Firm>(
          //   property = Firm->propertyByName('name')->toOne(),
          //   maxLength = 64
          // )
        ],
        services = [
          ^InteractiveService(
            name = 'allFirms',
            authorization = [],
            query = |Firm.all()
          ),
          ^InteractiveService(
            name = 'firmById',
            authorization = [],
            query = id: Integer[1]|Firm.all()->filter(f | $f.id == $id)
          )      
        ]
      )
    ]
  );
}

Class meta::legend::relational::crud::tests::Firm
{
  id: Integer[1];
  name: String[0..1];
}






// // This stuff is for manual testing/debugging...
// Class meta::relational::crud::tests::Query
// {
//   allFirms()
//   {
//     Firm.all()
//   }: Firm[*];
// }

// ###Relational
// Database meta::relational::crud::tests::DefinedDb
// (
//   Table FIRM_TABLE (ID INT PRIMARY KEY, NAME VARCHAR(64))
// )

// ###Mapping
// Mapping meta::relational::crud::tests::DefinedMapping
// (
//   meta::relational::crud::tests::Firm: Relational
//   {
//     id : [meta::relational::crud::tests::DefinedDb]FIRM_TABLE.ID,
//     name : [meta::relational::crud::tests::DefinedDb]FIRM_TABLE.NAME
//   }
// )

// ###Pure
// import meta::pure::runtime::*;
// import meta::relational::metamodel::execute::*;

// import meta::relational::crud::tests::*;
// function meta::relational::crud::tests::manualTest(): Any[*]
// {
//   let runtime = testRuntime();
//   let connection = $runtime.connectionByElement(DefinedDb)->cast(@meta::relational::runtime::TestDatabaseConnection);
//   executeInDb('DROP TABLE IF EXISTS FIRM;', $connection, 5000, 5000);
//   executeInDb('CREATE TABLE FIRM (ID INT PRIMARY KEY, NAME VARCHAR(64));', $connection, 5000, 5000);
//   executeInDb('INSERT INTO FIRM (ID, NAME) VALUES (1, \'GS\');', $connection, 5000, 5000);

//   let debugContext = ^DebugContext(debug = false, space = '');
//   let executionContext = ^ExecutionContext();

//   let result = execute(|Firm.all(), DefinedMapping, $runtime, $executionContext, meta::pure::router::extension::defaultRelationalExtensions(), $debugContext);
//   println($result.values->size()); 
// }

// function meta::relational::crud::tests::testRuntime(): meta::pure::runtime::Runtime[1]
// {
//   ^Runtime(
//     connections = [
//       ^meta::relational::runtime::TestDatabaseConnection(
//         element = DefinedDb,
//         type = meta::relational::runtime::DatabaseType.H2,
//         timeZone = 'GMT'
//       )
//     ]
//   )
// }
// ////////